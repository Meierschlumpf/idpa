// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Subject {
  id        String @id @default(cuid())
  name      String @db.Text
  routeName String @db.Text
  icon      String @db.Text
  plans     Plan[]
}

model Plan {
  id                 String              @id @default(cuid())
  day                Int
  startTime          Int                 @default(0)
  endTime            Int                 @default(0)
  subjectId          String
  semesterId         String
  subject            Subject             @relation(fields: [subjectId], references: [id])
  semester           Semster             @relation(fields: [semesterId], references: [id])
  items              PlanItem[]
  referenceMaterials ReferenceMaterial[]
}

model ReferenceMaterial {
  id        String     @id @default(cuid())
  name      String     @db.Text
  link      String     @db.Text
  planId    String
  plan      Plan       @relation(fields: [planId], references: [id])
  tasks     Task[]
  homeworks Homework[]
}

model Task {
  id          String              @id @default(cuid())
  title       String              @db.Text
  description String?             @db.Text
  planItemId  String
  planItem    PlanItem            @relation(fields: [planItemId], references: [id])
  materials   ReferenceMaterial[]
  isDone      Boolean             @default(false)
}

model Homework {
  id          String              @id @default(cuid())
  title       String              @db.Text
  description String?             @db.Text
  planItemId  String
  planItem    PlanItem            @relation(fields: [planItemId], references: [id])
  materials   ReferenceMaterial[]
  isDone      Boolean             @default(false)
}

model ActiveRole {
  name String @id
}

model Semster {
  id    String   @id
  start DateTime
  end   DateTime
  plans Plan[]
}

model PlanItem {
  id          String          @id @default(cuid())
  date        DateTime
  title       String?         @db.Text
  description String?         @db.Text
  planId      String
  badges      PlanItemBadge[]
  tasks       Task[]
  homeworks   Homework[]
  plan        Plan            @relation(fields: [planId], references: [id])
}

model PlanItemBadge {
  itemId    String
  badgeId   String
  evaluated Boolean
  item      PlanItem  @relation(fields: [itemId], references: [id])
  badge     PlanBadge @relation(fields: [badgeId], references: [id])

  @@id([itemId, badgeId], name: "PlanItemBadge_itemId_badgeId_key")
}

model PlanBadge {
  id    String          @id @default(cuid())
  name  String          @db.Text
  items PlanItemBadge[]
}
